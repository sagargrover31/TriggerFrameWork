public virtual class TriggerHandler {
    private static Map<String, LoopCount> loopCountMap;
    private static Set<String> bypassedHandlers;

    public static Boolean ByPassAllTriggers = false;


    @TestVisible
    protected TriggerContext context;

    @TestVisible
    private Boolean isTriggerExecuting;

    static {
        loopCountMap = new Map<String, LoopCount>();
        bypassedHandlers = new Set<String>();
    }

    // constructor
    public TriggerHandler() {
        this.setTriggerContext();
    }

    public virtual void run() {

        if (!validateRun()) {
            return;
        }

        switch on this.context {
        when BEFORE_INSERT {
            this.beforeInsert();
        }
        when BEFORE_UPDATE {
            this.beforeUpdate();
        }
        when BEFORE_DELETE {
            this.beforeDelete();
        }
        when AFTER_INSERT {
            this.afterInsert();
        }
        when AFTER_UPDATE {
            this.afterUpdate();
        }
        when AFTER_DELETE {
            this.afterDelete();
        }
        when AFTER_UNDELETE {
            this.afterUndelete();
        }
        }
    }

    public void setMaxLoopCount(Integer max) {
        String handlerName = getHandlerName();
        if (!TriggerHandler.loopCountMap.containsKey(handlerName)) {
            TriggerHandler.loopCountMap.put(handlerName, new LoopCount(max));
        } else {
            TriggerHandler.loopCountMap.get(handlerName).setMax(max);
        }
    }

    public void clearMaxLoopCount() {
        this.setMaxLoopCount(-1);
    }

    public static void bypass(String handlerName) {
        TriggerHandler.bypassedHandlers.add(handlerName);
    }

    public static void clearBypass(String handlerName) {
        TriggerHandler.bypassedHandlers.remove(handlerName);
    }

    public static Boolean isBypassed(String handlerName) {
        return TriggerHandler.bypassedHandlers.contains(handlerName);
    }

    public static void clearAllBypasses() {
        TriggerHandler.bypassedHandlers.clear();
    }

    @TestVisible
    private void setTriggerContext() {
        this.setTriggerContext(null, false);
    }

    @TestVisible
    private void setTriggerContext(String ctx, Boolean testMode) {
        if (!Trigger.isExecuting && !testMode) {
            this.isTriggerExecuting = false;
            return;
        } else {
            this.isTriggerExecuting = true;
        }

        if (ctx != null) {
            switch on ctx {
            when 'before insert' {
                this.context = TriggerContext.BEFORE_INSERT;
            }
            when 'before update' {
                this.context = TriggerContext.BEFORE_UPDATE;
            }
            when 'before delete' {
                this.context = TriggerContext.BEFORE_DELETE;
            }
            when 'after insert' {
                this.context = TriggerContext.AFTER_INSERT;
            }
            when 'after update' {
                this.context = TriggerContext.AFTER_UPDATE;
            }
            when 'after delete' {
                this.context = TriggerContext.AFTER_DELETE;
            }
            when 'after undelete' {
                this.context = TriggerContext.AFTER_UNDELETE;
            }
            }
        } else {
            switch on Trigger.operationType {
            when BEFORE_INSERT {
                this.context = TriggerContext.BEFORE_INSERT;
            }
            when BEFORE_UPDATE {
                this.context = TriggerContext.BEFORE_UPDATE;
            }
            when BEFORE_DELETE {
                this.context = TriggerContext.BEFORE_DELETE;
            }
            when AFTER_INSERT {
                this.context = TriggerContext.AFTER_INSERT;
            }
            when AFTER_UPDATE {
                this.context = TriggerContext.AFTER_UPDATE;
            }
            when AFTER_DELETE {
                this.context = TriggerContext.AFTER_DELETE;
            }
            when AFTER_UNDELETE {
                this.context = TriggerContext.AFTER_UNDELETE;
            }
            }
        }
    }

    @TestVisible
    private void addToLoopCount() {
        String handlerName = getHandlerName();
        if (TriggerHandler.loopCountMap.containsKey(handlerName)) {
            Boolean exceeded = TriggerHandler.loopCountMap.get(handlerName)
                    .increment();
            if (exceeded) {
                Integer max = TriggerHandler.loopCountMap.get(handlerName).max;
                throw new TriggerHandlerException(
                        'Maximum loop count of ' +
                        String.valueOf(max) +
                        ' reached in ' +
                        handlerName
                        );
            }
        }
    }
    
    public static CustomSettings activationSettingInstance = null;
    
    public static CustomSettings getActivationSettingsInstance() {
        if(Test.isRunningTest() || activationSettingInstance == null) {
            activationSettingInstance = CustomSettings.getInstance();
        }

        return activationSettingInstance;
    }

    @TestVisible
    public Boolean validateRun() {
        if (!this.isTriggerExecuting || this.context == null) {
            throw new TriggerHandlerException('Trigger handler called outside of Trigger execution');
        }

        CustomSettings executionSetting = getActivationSettingsInstance();//CustomSettings.getInstance();
        Boolean userByPassTriggers =  executionSetting.AT_ByPassAllTriggers__c;

        if(userByPassTriggers == true || TriggerHandler.ByPassAllTriggers == true || TriggerHandler.bypassedHandlers.contains(getHandlerName())) {
            return false;
        }
        return true;
    }

    @TestVisible
    private String getHandlerName() {
        return String.valueOf(this).substring(0, String.valueOf(this).indexOf(':'));
    }

    @TestVisible
    protected virtual void beforeInsert() {
    }
    @TestVisible
    protected virtual void beforeUpdate() {
    }
    @TestVisible
    protected virtual void beforeDelete() {
    }
    @TestVisible
    protected virtual void afterInsert() {
    }
    @TestVisible
    protected virtual void afterUpdate() {
    }
    @TestVisible
    protected virtual void afterDelete() {
    }
    @TestVisible
    protected virtual void afterUndelete() {
    }

    @TestVisible
    private class LoopCount {
        private Integer max;
        private Integer count;

        public LoopCount() {
            this.max = 5;
            this.count = 0;
        }

        public LoopCount(Integer max) {
            this.max = max;
            this.count = 0;
        }

        public Boolean increment() {
            this.count++;
            return this.exceeded();
        }

        public Boolean exceeded() {
            if (this.max < 0) {
                return false;
            }
            if (this.count > this.max) {
                return true;
            }
            return false;
        }

        public Integer getMax() {
            return this.max;
        }

        public Integer getCount() {
            return this.count;
        }

        public void setMax(Integer max) {
            this.max = max;
        }
    }

    @TestVisible public enum TriggerContext {
        BEFORE_INSERT,
        BEFORE_UPDATE,
        BEFORE_DELETE,
        AFTER_INSERT,
        AFTER_UPDATE,
        AFTER_DELETE,
        AFTER_UNDELETE
    }
    public class TriggerHandlerException extends Exception {
    }
}
